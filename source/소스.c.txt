#include <stdio.h>
#include <math.h>
int cnt;

int is_prime(int n){
	int a=0;
	for (int i = 2; i <= sqrt(double(n)); i++){
		if (n%i == 0) a += 1;
	}
	if (a == 0) return 1;
	else return 0;
}
int collatz(int n){
	while (1){
		if (n == 1) break;
		else if (n % 2 != 1) n /= 2;
		else n=3 * n + 1;
		cnt++;
	}
	return cnt;
}
void cntd(int n){
	for (int i=n; i > 0; i--){
		printf("%d ", i);
	}
	return;
}
int fact(const unsigned int n){
	if (n <= 1)
		return 1;
	else return n*fact(n - 1);
}//tail recursion

int power(const unsigned int x, const unsigned int n){
	if (n == 0) return 1;
	if (n == 1) return x;
	else return x*power(x,n - 1);
}
int fibo(const unsigned int n){
	cnt++;
	if (n == 1) return 0;
	if (n == 2) return 1;
	else return fibo(n - 1) + fibo(n - 2);
}
int fibo2(const unsigned int n){
	int arr[1000] = { 0, 0,1, 1 ,};
	for (int i = 3; i <= n;i++){
		arr[i] = arr[i - 1] + arr[i - 2];
	}
	return arr[n];
}
void divisor(const unsigned int n){
	for (int i = 1; i <= n; ++i){
		if (n%i == 0) printf("%d ", i);
	}
	return;
}

void prime_factor(const unsigned int n){
	int a = n;
	if (a < 2) printf("%d", a);
	for (int i = 2; i <= a; i++){
		while (a%i == 0) {
			a /= i;
			printf("%d ", i);
		}
	}
	return;
}

int gcd(const int a, const int b){
	if (b == 0) return a;
	else return gcd(b, a%b);
}
int gcd2(const int a, const int b){
	int val1 = a;
	int val2 = b;
	int temp;
	while (1){
		if (val2 == 0) break;
		else {
			temp = val1;
			val1 = val2;
			val2 = temp%val2;
		}
	}
	return val1;
}

int main(){
	int a,b;
	scanf("%d %d", &a,&b);
	printf("%d",gcd2(a,b));
	return 0;
}